name: "OctoPrint E2E Test"
description: "Runs OctoPrint's E2E tests"

inputs:
  repository:
    description: "OctoPrint repository to check out"
    required: false
    default: OctoPrint/OctoPrint
  ref:
    description: "OctoPrint ref to check out"
    required: false
    default: "main"
  octoprint:
    description: "OctoPrint dep to install via pip"
    required: false
    default: "."
  deps:
    description: "Additional dependencies to install via pip, e.g. plugins"
    required: false
    default: ""
  python:
    description: "Python version to use"
    required: false
    default: "3.12"
  suffix:
    description: "Suffix to use for the generated artifacts"
    required: false
    default: ""
  server:
    description: "URL of existing server to test"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: "⬇ Checkout OctoPrint with E2E tests"
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        fetch-depth: 0
        path: OctoPrint

    - name: "🔎 Figure out location of CI related files"
      shell: bash
      run: |
        if [ -d "OctoPrint/.github/ci" ]; then
          CI=ci
        else
          CI=fixtures
        fi

        echo "CI_FILES=OctoPrint/.github/$CI" >> $GITHUB_ENV

    - name: 🏗 Set up Python ${{ inputs.python }}
      if: ${{ !inputs.server }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python }}

    - name: 🏗 Install OctoPrint
      if: ${{ !inputs.server }}
      working-directory: ./OctoPrint/
      shell: bash
      run: |
        pip install ${{ inputs.octoprint }}
        [ -z "${{ inputs.deps }}" ] || pip install --upgrade ${{ inputs.deps }}

    - name: 🏗 Create base config for test server
      if: ${{ !inputs.server }}
      shell: bash
      run: |
        mkdir e2econfig

        CONFIG="$CI_FILES/e2econfig"
        if [ ! -d "$CONFIG" ]; then
          # old config location
          CONFIG="$CI_FILES/with_acl"
        fi

        cp -r "$CONFIG/*" e2econfig

    - name: 🏗 Install mfa dummy plugin if available
      if: ${{ !inputs.server }}
      shell: bash
      run: |
        mfa_dummy="$CI_FILES/mfa_dummy"
        if [ -d "$mfa_dummy" ]; then
          mkdir -p e2econfig/plugins
          cp -r "$mfa_dummy" "e2econfig/plugins/mfa_dummy"
          echo "TEST_MFA=1" >> $GITHUB_ENV
        fi

    - name: 🏗 Install csrf test plugin if available
      if: ${{ !inputs.server }}
      shell: bash
      run: |
        csrf_test="$CI_FILES/csrf_test.py"
        if [ -f "$csrf_test" ]; then
          mkdir -p e2econfig/plugins
          cp -r "$csrf_test" "e2econfig/plugins/csrf_test.py"
          echo "TEST_CSRF=1" >> $GITHUB_ENV
        fi

    - name: 🏗 Prepare Playwright env
      working-directory: ./OctoPrint/tests/playwright
      shell: bash
      run: |
        npm ci
        PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')
        echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

    - name: 🧰 Cache Playwright browser binaries
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: "~/.cache/ms-playwright"
        key: "${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}"
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: 🏗 Install Playwright browser binaries & OS dependencies
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      working-directory: ./OctoPrint/tests/playwright
      shell: bash
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        npx playwright install --with-deps

    - name: 🏗 Install Playwright OS dependencies
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      working-directory: ./OctoPrint/tests/playwright
      shell: bash
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        npx playwright install-deps

    - name: 🎭 Start server and run Playwright
      if: ${{ !inputs.server }}
      working-directory: ./OctoPrint/tests/playwright
      shell: bash
      run: |
        # disable update notifications for core & bundled plugins
        octoprint -b "$OCTOPRINT_SERVER_BASE" config set --bool plugins.softwareupdate.checks.octoprint.disabled true
        octoprint -b "$OCTOPRINT_SERVER_BASE" config set --bool plugins.softwareupdate.checks.file_check.disabled true
        octoprint -b "$OCTOPRINT_SERVER_BASE" config set --bool plugins.softwareupdate.checks.firmware_check.disabled true
        octoprint -b "$OCTOPRINT_SERVER_BASE" config set --bool plugins.softwareupdate.checks.pi_support.disabled true

        export PLAYWRIGHT_HTML_OUTPUT_DIR=playwright-report/parallel
        npx playwright test --grep-invert "@isolated|@csrf"

        export PLAYWRIGHT_HTML_OUTPUT_DIR=playwright-report/isolated 
        if npx playwright test --list --grep @isolated > /dev/null; then
          npx playwright test --grep @isolated --workers=1
        fi

        if [ "$TEST_CSRF" == "1" ]; then
          export PLAYWRIGHT_HTML_OUTPUT_DIR=playwright-report/csrf
          if npx playwright test --list --grep @csrf > /dev/null; then
            octoprint -b "$OCTOPRINT_SERVER_BASE" config set --bool devel.enableCsrfProtection true
            npx playwright test --grep @csrf
          fi
        fi
      env:
        OCTOPRINT_SERVER_BASE: ${{ github.workspace }}/e2econfig
        TEST_MFA: ${{ env.TEST_MFA }}
        TEST_CSRF: ${{ env.TEST_CSRF }}

    - name: 🎭 Run Playwright against existing server
      if: ${{ inputs.server }}
      working-directory: ./OctoPrint/tests/playwright
      shell: bash
      run: |
        npx playwright test --grep-invert "@isolated|@csrf"
      env:
        NO_SERVER: true
        PLAYWRIGHT_BASEURL: ${{ inputs.server }}

    - name: 🔎 Check octoprint.log for errors
      if: ${{ inputs.server }} === ""
      shell: bash
      run: |
        log=${{ github.workspace }}/e2econfig/logs/octoprint.log
        if grep "\- ERROR \-" $log; then
          echo "::error::Errors were logged to octoprint.log"
          grep -Pazo '(?m)^\N+\- ERROR \-\N*\n(^\N*?\n)*?(?=\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3} \- )' $log
          exit 1
        fi

    - name: ⬆ Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report${{ inputs.suffix }}
        path: ${{ github.workspace }}/OctoPrint/tests/playwright/playwright-report

    - name: ⬆ Upload OctoPrint logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: octoprint-logs${{ inputs.suffix }}
        path: ${{ github.workspace }}/e2econfig/logs
